<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="scopes">
	<title>Faces Scoping Support</title>
	<para>
		JSF 2.0 introduced the concept of the Flash object and the @ViewScope; however, JSF 2.0 did not provide annotations accessing the Flash,
		 and CDI does not support the non-standard ViewScope by default. The Seam Faces module does both, in addition to adding a new @RenderScoped context. 
         Beans stored in the Render Scope will survive until the next page is rendered. For the most part, beans stored in the ViewScope will survive as
         long as a user remains on the same page, and data in the JSF 2 Flash will survive as long as the flash survives).
	</para>
	<section id="RenderScoped">
		<title>@RenderScoped</title>
	  <para>
            Beans placed in the @RenderScoped context are effectively scoped to, and live through but not after, "the next Render Response phase". 
     </para>
     
      <para>
			You should think about using the Render scope if you want to store information that will be relevant to the user even after an action
			sends them to another view. For instance, when a user submits a form, you may want to invoke JSF navigation and redirect 
			the user to another page in the site; if you needed to store a message to be displayed when the next page is rendered -but no longer- 
			you would store that message in the RenderContext. Fortunately, Seam provides RenderScoped messages by default, via the 
			<link linkend="faces.messages">Seam Messages API</link>. 
		</para>
		
		<para>
			To place a bean in the Render scope, use the <literal>@org.jboss.seam.faces.context.RenderScoped</literal> annotation. This means that your
      bean will be stored in the  <literal>org.jboss.seam.context.RenderContext</literal> object until the next page is rendered, 
      at which point the RenderScope will be cleared.
    </para>
    
<programlisting role="JAVA"><![CDATA[@RenderScoped
public class Bean {
	// ...
}]]></programlisting>
     <para>
       <literal>@RenderScoped</literal> beans are destroyed when the next <literal>JSF RENDER_RESPONSE</literal> phase 
       ends, however, if a user has multiple browser windows open for the same user-session, multiple 
       <literal>RenderContext</literal>s will be created, one for each incoming request. Seam Faces keeps
       track of which <literal>RenderContext</literal> belongs to each request, and will restore/destroy them appropriately. 
       If there is more than one active <literal>RenderContext</literal> at the time when you issue a redirect, you will see 
       a URL parameter <literal>?fid=...</literal> appended to the end of the outbound URL, this is to ensure the correct 
       context is restored when the request is received by the server, and will not be present if only one context is active.
     </para>

	<caution>
				<para>
					If you want to use the Render Scope with custom navigation in your application, 
					be sure to call <literal>ExternalContext.encodeRedirectURL(String url, Map&lt;String, List&lt;String&gt;&gt; queryParams)</literal>
					on any URL before using it to issue a redirect. This will ensure that the RenderContext ID is properly appended to the URL, enabling
					the RenderContext to be restored on the subsequent request. This is only necessary if issuing a Servlet Redirect; for the
                    cases where Faces non-redirecting navigation is used, no URL parameter is necessary, and the context will be destroyed at the end
                    of the current request.
				</para>
			</caution>
	</section>
    <section id="flashproducer">
      <title>@Inject javax.faces.context.Flash flash</title>
      <para>
         JSF 2 does not provide proper system events to create a functional <literal>@FlashScoped</literal> context annotation integrated with CDI, so until
         a workaround can be found, or JSF 2 is enhanced, you can access the Flash via the @Inject annotation. For more information on the 
               <ulink url="https://javaserverfaces.dev.java.net/nonav/docs/2.0/javadocs/javax/faces/context/Flash.html">JSF Flash</ulink>, read 
               <ulink url="https://javaserverfaces.dev.java.net/nonav/docs/2.0/javadocs/javax/faces/context/Flash.html">this API doc</ulink>.
      </para>
         <programlisting role="JAVA">
public class Bean {
   @Inject private Flash flash;
   // ...
}</programlisting>
    </section>
 <!--  
 <section id="flashscoped">
      <title>@FlashScoped</title>
      <para>
         To scope a bean to the JSF Flash (similar to @RenderScoped, but subtly different - favor @RenderScoped if you are unsure), use the 
         <literal>@javax.faces.bean.ViewScoped</literal> annotation. This means that your bean will be stored in the <literal>javax.faces.context.Flash</literal>
         object, which is accessible via: <literal>FacesContext.getCurrentInstance().getExternalContext().getFlash()</literal>, but for convenience, can
         be injected into your beans with <literal>@Inject Flash flash;</literal>
         <programlisting role="JAVA">@FlashScoped
public class Bean {
   // ...
}</programlisting>
         <caution>
            <para>
               @FlashScoped beans are destroyed when the JSF Flash context is emptied. This means that the
               life-span of @FlashScoped beans is dependent on the <literal>javax.faces.context.Flash</literal> implementation supplied by
               your JSF implementation. For more information on the 
               <ulink url="https://javaserverfaces.dev.java.net/nonav/docs/2.0/javadocs/javax/faces/context/Flash.html">JSF Flash</ulink>, read 
               <ulink url="https://javaserverfaces.dev.java.net/nonav/docs/2.0/javadocs/javax/faces/context/Flash.html">this API doc</ulink>.
            </para>
         </caution>
      </para>
   </section>
   
    --> 
	<section id="viewscoped">
		<title>@ViewScoped</title>
		
		<para>
			To scope a bean to the View, use the <literal>@javax.faces.bean.ViewScoped</literal> annotation. This means that your bean will be stored in the 
			<literal>javax.faces.component.UIViewRoot</literal> object associated with the view in which it was accessed. Each JSF view (faces-page) will store
			its own instance of the bean, just like each HttpServletRequest has its own instance of a @RequestScoped bean.
    </para>
			
			<programlisting role="JAVA">@ViewScoped
public class Bean {
	// ...
}</programlisting>
			<caution>
				<para>
					@ViewScoped beans are destroyed when the JSF UIViewRoot object is destroyed. This means that the
					life-span of @ViewScoped beans is dependent on the <literal>javax.faces.STATE_SAVING_METHOD</literal> employed by the application itself,
					but in general one can assume that the bean will live as long as the user remains on the same page.
				</para>
			</caution>
	</section>
</chapter>
